{
  "openapi": "3.1.0",
  "info": {
    "title": "Navixy IoT Gateway API",
    "version": "1.0.0",
    "contact": {
      "name": "Navixy support",
      "email": "support@navixy.com",
      "url": "https://www.navixy.com/contact/"
    },
    "license": {
      "name": "Apache 2.0",
      "identifier": "Apache-2.0"
    }
  },
  "externalDocs": {
    "description": "Find more info here",
    "url": "https://developers.navixy.com/"
  },
  "servers": [
    {
      "url": "https://api.eu.navixy.com/",
      "description": "Navixy production server on European platform"
    },
    {
      "url": "https://api.us.navixy.com/",
      "description": "Navixy production server on American platform"
    }
  ],
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [],
  "paths": {
    "/iot/logic/flow/create": {
      "post": {
        "tags": ["Flow"],
        "description": "Create a new flowchart",
        "operationId": "flowCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "flow": {
                    "$ref": "#/components/schemas/FlowDraft"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityCreatedResponse"
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/read": {
      "get": {
        "tags": ["Flow"],
        "description": "Read a flowchart",
        "operationId": "flowRead",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "flow_id"
                ],
                "properties": {
                  "flow_id": {
                    "type": "integer",
                    "description": "Flow ID",
                    "example": 12
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response to read a flow",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "`true` if request finished successfully.",
                      "example": true
                    },
                    "value": {
                      "$ref": "#/components/schemas/Flow"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/update": {
      "post": {
        "tags": ["Flow"],
        "description": "Update a flowchart",
        "operationId": "flowUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "flow"
                ],
                "properties": {
                  "flow": {
                    "$ref": "#/components/schemas/Flow"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/delete": {
      "post": {
        "tags": ["Flow"],
        "description": "Delete a flowchart",
        "operationId": "flowDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "flow_id"
                ],
                "properties": {
                  "flow_id": {
                    "type": "integer",
                    "description": "Flow ID",
                    "example": 12
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response to delete a flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/list": {
      "get": {
        "tags": ["Flow"],
        "description": "Get list of flows",
        "operationId": "flowList",
        "responses": {
          "200": {
            "description": "Successful response to read a list of flows",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "`true` if request finished successfully",
                      "example": true
                    },
                    "list": {
                      "type": "array",
                      "readOnly": true,
                      "description": "List of user's scripts",
                      "items": {
                        "type": "object",
                        "readOnly": true,
                        "properties": {
                          "id": {
                            "type": "integer",
                            "readOnly": true,
                            "description": "Flow ID",
                            "example": 1234
                          },
                          "title": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Flow name",
                            "example": "Super flow"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/endpoint/create": {
      "post": {
        "tags": ["Node"],
        "description": "Create a new endpoint",
        "operationId": "endpointCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "endpoint"
                ],
                "properties": {
                  "endpoint": {
                    "$ref": "#/components/schemas/IotEndpointDraft"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityCreatedResponse"
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/endpoint/read": {
      "post": {
        "tags": ["Node"],
        "description": "Read an endpoint",
        "operationId": "endpointRead",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "endpoint_id"
                ],
                "properties": {
                  "endpoint_id": {
                    "type": "integer",
                    "description": "Endpoint ID in database",
                    "example": 1723
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response to read endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "`true` if request finished successfully",
                      "example": true
                    },
                    "value": {
                      "$ref": "#/components/schemas/IotEndpoint"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/endpoint/update": {
      "post": {
        "tags": ["Node"],
        "description": "Update an endpoint",
        "operationId": "endpointUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "endpoint"
                ],
                "properties": {
                  "endpoint": {
                    "$ref": "#/components/schemas/IotEndpoint"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/endpoint/delete": {
      "post": {
        "tags": ["Node"],
        "description": "Delete an endpoint",
        "operationId": "endpointDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "endpoint_id"
                ],
                "properties": {
                  "endpoint_id": {
                    "type": "integer",
                    "description": "Endpoint ID in database",
                    "example": 1723
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    },
    "/iot/logic/flow/endpoint/list": {
      "post": {
        "tags": ["Node"],
        "description": "Get list of user's endpoints",
        "operationId": "endpointList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response to read a list of endpoints",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "`true` if request finished successfully",
                      "example": true
                    },
                    "list": {
                      "type": "array",
                      "readOnly": true,
                      "description": "List of user's scripts",
                      "items": {
                        "$ref": "#/components/schemas/IotEndpoint"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ResponseError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api_key": {
        "description": "Enter an API key with the \"NVX: \" prefix, e.g. \"NVX 123456abcdefg\"",
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "Success": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "readOnly": true,
            "description": "`true` if request finished successfully, otherwise `false`",
            "example": true
          }
        }
      },
      "FlowId": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Flow ID",
            "example": 12
          }
        }
      },
      "Edge": {
        "description": "Edge between two Nodes",
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "type": "integer",
            "example": 1
          },
          "to": {
            "type": "integer",
            "example": 2
          },
          "type": {
            "description": "Edge type, optional, if not specified it is `simple_edge`",
            "$ref": "#/components/schemas/EdgeType"
          }
        }
      },
      "EdgeType": {
        "type": "string",
        "enum": ["simple_edge", "then_edge", "else_edge"],
        "example": "simple_edge"
      },
      "IotEndpoint": {
        "type": "object",
        "description": "Input or output endpoint",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Endpoint ID inside user account",
                "example": 1723
              }
            }
          },
          {
            "$ref": "#/components/schemas/IotEndpointDraft"
          }
        ]
      },
      "IotEndpointDraft": {
        "description": "Input or output endpoint",
        "type": "object",
        "required": [
          "title",
          "type",
          "status"
        ],
        "properties": {
          "user_id": {
            "type": "integer",
            "description": "Master user ID",
            "example": 8
          },
          "type": {
            "type": "string",
            "description": "Endpoint type. One of: 'output_navixy', 'output_mqtt_client'.",
            "example": "output_mqtt_client"
          },
          "title": {
            "type": "string",
            "example": "MQTT Endpoint Client Properties"
          },
          "status": {
            "type": "string",
            "description": "Endpoint status. One of: 'active', 'suspend', 'disabled'."
          },
          "properties": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/IotEndpointMqttClientProperties"
              },
              {
                "type": "object",
                "description": "Navixy endpoint - empty object (no properties)",
                "properties": {
                }
              }
            ]
          }
        }
      },
      "IotEndpointMqttClientProperties": {
        "description": "MQTT client endpoint",
        "type": "object",
        "required": [
          "protocol",
          "domain",
          "port",
          "client_id",
          "qos",
          "topics",
          "version",
          "use_ssl",
          "mqtt_auth"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol of messages: \"NGP\" (Navixy Generic Protocol)",
            "example": "NGP"
          },
          "domain": {
            "type": "string",
            "description": "MQTT domain or IP address",
            "example": "127.0.0.1"
          },
          "port": {
            "type": "integer",
            "description": "MQTT port",
            "example": 1883
          },
          "client_id": {
            "type": "string",
            "description": "MQTT client ID",
            "example": "Navixy (panel #123)"
          },
          "qos": {
            "type": "integer",
            "description": "MQTT QoS: 0 or 1 (2 is unsupported at the moment)",
            "example": 1
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "MQTT topic name",
              "example": "iot/navixy"
            }
          },
          "version": {
            "type": "string",
            "description": "MQTT version: \"3.1.1\" or \"5.0\"",
            "example": "5.0"
          },
          "use_ssl": {
            "type": "boolean",
            "description": "Use or not SSL encryption for MQTT connection",
            "example": false
          },
          "mqtt_auth": {
            "type": "boolean",
            "description": "Use or not MQTT authentication",
            "example": true
          },
          "user_name": {
            "type": "string",
            "description": "MQTT user name",
            "example": "navixy"
          },
          "user_password": {
            "type": "string",
            "description": "MQTT password",
            "example": "your_super_strong_password"
          }
        }
      },
      "NodeDataSource": {
        "description": "Node: Data Source",
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NodeID"
          },
          "type": {
            "type": "string",
            "description": "Node type. Always \"data_source\".",
            "example": "data_source"
          },
          "data": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Standard Data Source"
              },
              "sources": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "description": "Source ID",
                  "example": 123458
                }
              }
            }
          },
          "view": {
            "$ref": "#/components/schemas/NodeView"
          }
        }
      },
      "NodeOutputEndpoint": {
        "description": "Node: output endpoint. This is the terminating node for any flow. It determines where the messages will be sent. By default, it is Navixy.",
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NodeID"
          },
          "type": {
            "type": "string",
            "description": "Node type. Always \"output_endpoint\".",
            "example": "output_endpoint"
          },
          "data": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NodeOutputEndpointDataNavixy"
              },
              {
                "$ref": "#/components/schemas/NodeOutputEndpointDataStoredEndpoint"
              }
            ]
          },
          "view": {
            "$ref": "#/components/schemas/NodeView"
          }
        }
      },
      "NodeOutputEndpointDataNavixy": {
        "type": "object",
        "description": "Data of Navixy output endpoint",
        "required": [
          "title",
          "output_endpoint_type"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Navixy output endpoint"
          },
          "output_endpoint_type": {
            "type": "string",
            "description": "Type of endpoint. Always 'output_navixy'.",
            "example": "output_navixy"
          }
        }
      },
      "NodeOutputEndpointDataStoredEndpoint": {
        "type": "object",
        "description": "Data of MQTT output endpoint",
        "required": [
          "title",
          "output_endpoint_type",
          "output_endpoint_id"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "MQTT output endpoint"
          },
          "output_endpoint_type": {
            "type": "string",
            "description": "Type of endpoint. Always 'output_mqtt_client'.",
            "example": "output_mqtt_client"
          },
          "output_endpoint_id": {
            "type": "integer",
            "description": "Output Endpoint identifier within the user account. It is required for only some types of node (e.g. output_mqtt_client) which has specific properties.",
            "example": 44551
          }
        }
      },
      "NodeInitiateAttributes": {
        "description": "Node: initiate attributes",
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NodeID"
          },
          "type": {
            "type": "string",
            "description": "Node type. Always \"initiate_attributes\".",
            "example": "initiate_attributes"
          },
          "data": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Add/modify attributes"
              },
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "fuel_tank_2"
                    },
                    "value": {
                      "type": "string",
                      "example": "(analog_1 + 100)/2"
                    },
                    "generation_time": {
                      "type": "string",
                      "example": "now()"
                    },
                    "server_time": {
                      "type": "string",
                      "example": "now()"
                    }
                  }
                }
              }
            }
          },
          "view": {
            "$ref": "#/components/schemas/NodeView"
          }
        }
      },
      "NodeLogic": {
        "description": "Node: logic",
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NodeID"
          },
          "type": {
            "type": "string",
            "description": "Node type. Always \"logic\".",
            "example": "logic"
          },
          "data": {
            "type": "object",
            "required": [
              "title",
              "name",
              "condition"
            ],
            "properties": {
              "title": {
                "type": "string",
                "example": "New logic node"
              },
              "name": {
                "type": "string",
                "example": "logic_1"
              },
              "condition": {
                "type": "string",
                "example": "!driver_identified && (vibration_active || speed > 3)"
              }
            }
          },
          "view": {
            "$ref": "#/components/schemas/NodeView"
          }
        }
      },
      "Node": {
        "description": "Flowchart Node",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/NodeDataSource"
          },
          {
            "$ref": "#/components/schemas/NodeInitiateAttributes"
          },
          {
            "$ref": "#/components/schemas/NodeLogic"
          },
          {
            "$ref": "#/components/schemas/NodeOutputEndpoint"
          }
        ]
      },
      "NodeView": {
        "description": "Flowchart Node view properties",
        "type": "object",
        "properties": {
          "position": {
            "type": "object",
            "description": "Position of the left top corner",
            "properties": {
              "x": {
                "type": "integer",
                "example": 25
              },
              "y": {
                "type": "integer",
                "example": 25
              }
            }
          }
        }
      },
      "NodeID": {
        "type": "integer",
        "description": "Node ID inside current flow",
        "example": 1
      },
      "FlowDraft": {
        "description": "Flowchart object without ID",
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Flow name",
            "example": "Super flow"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable/disable flag",
            "example": true
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Node"
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Edge"
            }
          }
        }
      },
      "Flow": {
        "type": "object",
        "description": "Flowchart object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowId"
          },
          {
            "$ref": "#/components/schemas/FlowDraft"
          }
        ]
      }
    },
    "responses": {
      "OK": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "success": {
                  "type": "boolean",
                  "readOnly": true,
                  "description": "`true` if request finished successfully.",
                  "example": true
                }
              }
            }
          }
        }
      },
      "EntityCreatedResponse": {
        "description": "Error response object",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "success": {
                  "type": "boolean",
                  "readOnly": true,
                  "description": "`true` if request finished successfully",
                  "example": true
                },
                "id": {
                  "type": "integer",
                  "readOnly": true,
                  "description": "ID of the created entity",
                  "example": 1723
                }
              }
            }
          }
        }
      },
      "ResponseError": {
        "description": "Error response object",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Always false.",
                  "example": false
                },
                "status": {
                  "description": "Error status. It only presence when an error occurred.",
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "An error code in this API (not an HTTP code)",
                      "type": "integer",
                      "example": 1
                    },
                    "description": {
                      "description": "An error description",
                      "type": "string",
                      "example": "Database error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
